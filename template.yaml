AWSTemplateFormatVersion: 2010-09-09
Description: ---
#################################################################################

Parameters:
  Amzn2Latest:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ami-amazon-linux-latest/amzn2-ami-kernel-5.10-hvm-x86_64-gp2
  AcmArn:
    Type: String

#################################################################################
Resources: 
  ###########################
  # Network
  ###########################
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    DependsOn: AttachGateway
    Properties:
      AvailabilityZone: !Select [ 0, "Fn::GetAZs": {Ref: "AWS::Region"}]
      CidrBlock: 10.0.0.0/24
      VpcId: !Ref VPC
  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    DependsOn: AttachGateway
    Properties:
      AvailabilityZone: !Select [ 1, "Fn::GetAZs": {Ref: "AWS::Region"}]
      CidrBlock: 10.0.1.0/24
      VpcId: !Ref VPC
  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    DependsOn: AttachGateway
    Properties:
      VpcId: !Ref VPC
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  InternetGateway:
    Type: AWS::EC2::InternetGateway
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  ###########################
  # Network Load Balancer
  ###########################
  EipNlb1:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  EipNlb2:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  NetworkLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      Type: network
      Name: !Sub ${AWS::StackName}-nlb
      SubnetMappings: 
        - SubnetId: !Ref PublicSubnet1
          AllocationId: !GetAtt EipNlb1.AllocationId
        - SubnetId: !Ref PublicSubnet2
          AllocationId: !GetAtt EipNlb2.AllocationId

  NetworkLoadBalancerListener80:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref NetworkLoadBalancer
      Port: 80
      Protocol: TCP
      DefaultActions: 
        - TargetGroupArn: !Ref NetworkLoadBalancerTargetGroup80
          Type: forward

  NetworkLoadBalancerTargetGroup80:
    DependsOn:
      - ApplicationListenerHTTP
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub ${AWS::StackName}-nlb80-tg
      VpcId: !Ref VPC
      Port: 80
      Protocol: TCP
      HealthCheckPort: traffic-port
      HealthCheckProtocol: HTTP
      HealthCheckPath: "/index.html"
      TargetType: alb
      Targets:
        - Id: !Ref ApplicationLoadBalancer
          Port: 80

  NetworkLoadBalancerListener443:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref NetworkLoadBalancer
      Port: 443
      Protocol: TCP
      DefaultActions: 
        - TargetGroupArn: !Ref NetworkLoadBalancerTargetGroup443
          Type: forward

  NetworkLoadBalancerTargetGroup443:
    DependsOn:
      - ApplicationListenerHTTP
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub ${AWS::StackName}-nlb443-tg
      VpcId: !Ref VPC
      Port: 443
      Protocol: TCP
      HealthCheckPort: traffic-port
      HealthCheckProtocol: HTTP
      HealthCheckPath: "/index.html"
      TargetType: alb
      Targets:
        - Id: !Ref ApplicationLoadBalancer
          Port: 443

  ###########################
  # Application Load Balancer
  ###########################
  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Type: "application"
      Scheme: "internet-facing"
      Name: !Sub ${AWS::StackName}-alb
      IpAddressType: ipv4
      Subnets: 
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      SecurityGroups: 
        - !Ref AlbServerSecurityGroup

  ApplicationListenerHTTP:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: redirect
          RedirectConfig:
            StatusCode: HTTP_301
            Host: '#{host}'
            Path: '/#{path}'
            Port: '443'
            Protocol: HTTPS
            Query: '#{query}'
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP
  ApplicationListenerHTTPS:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ApplicationTargetGroup
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 443
      Protocol: HTTPS
      Certificates:
        - CertificateArn: !Ref AcmArn

  ApplicationTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub ${AWS::StackName}-alb-tg
      Port: 80
      Protocol: HTTP
      HealthCheckEnabled: true
      HealthCheckProtocol: 'HTTP'
      HealthCheckPath: '/index.html'
      HealthCheckPort: '80'
      HealthyThresholdCount: 5
      UnhealthyThresholdCount: 3
      HealthCheckTimeoutSeconds: 5
      HealthCheckIntervalSeconds: 10
      Matcher:
        HttpCode: '200'
      VpcId: !Ref VPC
      TargetType: instance

  AlbServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
        GroupDescription: hoge
        GroupName: !Sub ${AWS::StackName}-alb-sg
        VpcId: !Ref VPC
        SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: 443
            ToPort: 443
            CidrIp: 0.0.0.0/0
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: 0.0.0.0/0

  ###########################
  # ASG & Instance
  ###########################
  KeyPair:
    Type: AWS::EC2::KeyPair
    Properties:
        KeyName: !Sub ${AWS::StackName}-key-pair
        KeyType: rsa

  LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub ${AWS::StackName}-launchtemplate
      LaunchTemplateData:
        KeyName: !Ref KeyPair
        ImageId: !Ref Amzn2Latest
        InstanceType: t3.small
        NetworkInterfaces: 
        - AssociatePublicIpAddress: true
          DeviceIndex: 0
          Groups:
          - !Ref EC2SecurityGroup
        UserData: 
          Fn::Base64: |
              #cloud-config
              package_update: true
              package_upgrade: true
              runcmd:
              - yum update -y
              - yum install httpd -y
              - service httpd start
              - chkconfig httpd on
              - echo "hoge" > /var/www/html/index.html
              write_files:
              - path: /var/www/html/index.html
                permissions: 0644
                owner: root
                content: |
                  hoge.html

  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: hoge
      GroupName: !Sub ${AWS::StackName}-ec2-sg
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref AlbServerSecurityGroup

  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Sub ${AWS::StackName}-asg
      DesiredCapacity: '1'
      MaxSize: '1'
      MinSize: '1'
      LaunchTemplate:
        LaunchTemplateId: !Ref LaunchTemplate
        Version: !GetAtt LaunchTemplate.LatestVersionNumber
      VPCZoneIdentifier:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      TargetGroupARNs:
        - !Ref ApplicationTargetGroup
      HealthCheckType: EC2

#################################################################################

Outputs:
  Ip1:
    Value: !Ref EipNlb1
  Ip2:
    Value: !Ref EipNlb2